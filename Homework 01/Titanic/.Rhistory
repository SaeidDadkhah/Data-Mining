if (!'dplyr' %in% rownames(installed.packages())) {install.packages('dplyr')}
library('dplyr')
if (!'ggplot2' %in% rownames(installed.packages())) {install.packages('ggplot2')}
library('ggplot2')
if (!"scales" %in% rownames(installed.packages())) {install.packages('scales')}
library('scales')
# Getting data
train <- read.csv('../train.csv')
test <- read.csv('../test.csv')
full <- bind_rows(train, test)
str(full)
# Feature engineering
## Get passenger title
full$Title <- gsub('(.*, )|(\\..*)', '', full$Name)
table(full$Name, full$Title)
rare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
full$Title[full$Title == 'Mlle']        <- 'Miss'
full$Title[full$Title == 'Ms']          <- 'Miss'
full$Title[full$Title == 'Mme']         <- 'Mrs'
full$Title[full$Title %in% rare_title]  <- 'Rare Title'
table(full$Sex, full$Title)
## Do families sink or swim together?
full$FSize <- full$SibSp + full$Parch + 1
plot_FSize_Survived <- ggplot(full[1:nrow(train), ], aes(x = FSize, fill = factor(Survived)))
plot_FSize_Survived <- plot_FSize_Survived +
geom_bar(stat = 'Count', position = 'dodge') +
scale_x_continuous(breaks = c(1:11)) +
labs(x = "Family Size")
print(plot_FSize_Survived)
full$FSizeD[full$FSize == 1] <- 'singleton'
full$FSizeD[1 < full$FSize & full$FSize < 5] <- 'small'
full$FSizeD[4 < full$FSize] < - 'large'
mosaicplot(table(full$FSizeD, full$Survived), main = 'Family size by survival'
full$FSizeD[full$FSize == 1] <- 'singleton'
full$FSizeD[1 < full$FSize & full$FSize < 5] <- 'small'
full$FSizeD[4 < full$FSize] < - 'large'
mosaicplot(table(full$FSizeD, full$Survived), main = 'Family size by survival')
full$FSizeD[full$FSize == 1] <- 'singleton'
full$FSizeD[1 < full$FSize & full$FSize < 5] <- 'small'
full$FSizeD[4 < full$FSize] < - 'large'
mosaicplot(table(full$FSizeD, full$Survived), main = 'Family size by survival', shade = TRUE)
full$FSizeD[full$FSize == 1] <- 'singleton'
full$FSizeD[1 < full$FSize & full$FSize < 5] <- 'small'
full$FSizeD[4 < full$FSize] <- 'large'
mosaicplot(table(full$FSizeD, full$Survived), main = 'Family size by survival', shade = TRUE)
summary(full$Age)
names(full)
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = '[,.]')[[1]][1])
head(full$Surname)
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = '[,.]')[[1]][1])
full$Family <- paste(full$Surname, full$FSize, sep = '_')
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = '[,.]')[[1]][1])
full$Family <- paste(full$Surname, full$FSize, sep = '_')
9231066
if (!'mice' %in% rownames(installed.packages())) {install.packages('mice')}
library('mice')
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = '[,.]')[[1]][1])
full$Family <- paste(full$Surname, full$FSize, sep = '_')
factor_vars <- c('PassengerId', 'Pclass', 'Sex', 'Embarked', 'Title', 'Surname', 'Family', 'FSizeD')
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(9231066)
mice_mod <- mice(full[, !names(full) %in%
c('PassengerId', 'Name', 'Ticket', 'Cabin', 'Family', 'Surname', 'Survived')],
method = 'rf')
mice_output <- complete(mice_mod)
if (!'randomForest' %in% rownames(installed.packages())) {install.packages('randomForest')}
library('randomForest')
set.seed(9231066)
mice_mod <- mice(full[, !names(full) %in%
c('PassengerId', 'Name', 'Ticket', 'Cabin', 'Family', 'Surname', 'Survived')],
method = 'rf')
mice_output <- complete(mice_mod)
head(mice_output)
par(mfrow = c(1, 2))
hist(full$Age, main = 'Age: Original Data', col = 'darkgreen', ylim = c(0, 0.04))
par(mfrow = c(1, 2))
hist(full$Age, main = 'Age: Original Data', col = 'darkgreen')
hist(full$Age, freq = F, main = 'Age: Original Data', col = 'darkgreen')
par(mfrow = c(1, 2))
hist(full$Age, freq = F, main = 'Age: Original Data', col = 'darkgreen', ylim = c(0, 0.04))
hist(mice_output, freq = F, main = 'Age: MICE Output', col = 'lightgreen', ylim = c(0, 0.04))
hist(mice_output$Age, freq = F, main = 'Age: MICE Output', col = 'lightgreen', ylim = c(0, 0.04))
full$Age <- mice_output$Age
summary(full$Age)
plot_Age_Survived_Sex <- ggplot(full[1:891, ], aes(Age, fill = factor(Survived)))
plot_Age_Survived_Sex <- plot_Age_Survived_Sex +
geom_histogram() +
facet_grid(.~Sex)
print(plot_Age_Survived_Sex)
full$Child[full$Age < 18] <- 'Child'
full$Child[full$Age >= 18] <- 'Adult'
table(full$Child, full$Survived)
str(full$Sex)
full$Mother <- 'Not Mother'
full$Mother[full$Sex == 'female' & full$Parch > 0 & full$Age > 18 & full$Title != 'Miss'] <- 'Mother'
str(full$Mother)
table(full$Mother, full$Survived)
full$Child <- as.factor(full$Child)
full$Mother <- as.factor(full$Mother)
md.pattern(full)
train <- full[1:nrow(train), ]
test <- full[(nrow(train) + 1):(nrow(train) + nrow(test)), ]
str(test)
9231066 + 2
# Prediction
train <- full[1:nrow(train), ]
test <- full[(nrow(train) + 1):(nrow(train) + nrow(test)), ]
## Random Forest model
set.seed(9231066 + 2)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title +
FSizeD + Child + Mother,
data = train)
plot(rf_model)
plot(rf_model, ylim(0, 0.36))
dev.off()
plot(rf_model, ylim(0, 0.36))
plot(c(1, 2))
plot(rf_model, ylim(0, 0.36))
if (!'dplyr' %in% rownames(installed.packages())) {install.packages('dplyr')}
library('dplyr')
if (!'ggplot2' %in% rownames(installed.packages())) {install.packages('ggplot2')}
library('ggplot2')
if (!'scales' %in% rownames(installed.packages())) {install.packages('scales')}
library('scales')
if (!'mice' %in% rownames(installed.packages())) {install.packages('mice')}
library('mice')
if (!'randomForest' %in% rownames(installed.packages())) {install.packages('randomForest')}
library('randomForest')
# Getting data
train <- read.csv('../train.csv')
test <- read.csv('../test.csv')
full <- bind_rows(train, test)
str(full)
# Feature engineering I
## Get passenger title
full$Title <- gsub('(.*, )|(\\..*)', '', full$Name)
table(full$Name, full$Title)
rare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
full$Title[full$Title == 'Mlle']        <- 'Miss'
full$Title[full$Title == 'Ms']          <- 'Miss'
full$Title[full$Title == 'Mme']         <- 'Mrs'
full$Title[full$Title %in% rare_title]  <- 'Rare Title'
table(full$Sex, full$Title)
## Do families sink or swim together?
full$FSize <- full$SibSp + full$Parch + 1
plot_FSize_Survived <- ggplot(full[1:nrow(train), ], aes(x = FSize, fill = factor(Survived)))
plot_FSize_Survived <- plot_FSize_Survived +
geom_bar(stat = 'Count', position = 'dodge') +
scale_x_continuous(breaks = c(1:11)) +
labs(x = "Family Size")
print(plot_FSize_Survived)
full$FSizeD[full$FSize == 1] <- 'singleton'
full$FSizeD[1 < full$FSize & full$FSize < 5] <- 'small'
full$FSizeD[4 < full$FSize] <- 'large'
mosaicplot(table(full$FSizeD, full$Survived), main = 'Family size by survival', shade = TRUE)
## Deck
full$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
# Missingness
## Embarked
table(full$Embarked)
missingEmbarked <- full[full$Embarked == "", "PassengerId"]
embarkFare <- full %>%
filter(!Embarked == "")
plot_Embark_Fare <- ggplot(embarkFare, aes(x = Embarked, y = Fare, fill = factor(Pclass)))
plot_Embark_Fare <- plot_Embark_Fare +
geom_boxplot() +
geom_hline(aes(yintercept = full[missingEmbarked[1], "Fare"]), colour = 'red', linetype = 'dashed', lwd = 2) +
scale_y_continuous(labels = dollar_format())
print(plot_Embark_Fare)
full$Embarked[missingEmbarked] <- 'C'
## Fare
summary(full$Fare)
missingFare <- full[is.na(full$Fare), "PassengerId"]
plot_Fare <- ggplot(full[full$Pclass == full[missingFare[1], "Pclass"] &
full$Embarked == full[missingFare[1], "Embarked"], ],
aes(x = Fare))
plot_Fare <- plot_Fare +
geom_density(fill = '#99d6ff', alpha = 0.4) +
geom_vline(aes(xintercept = median(Fare, na.rm = TRUE)), colour = 'red', linetype = 'dashed', lwd = 1) +
scale_x_continuous(labels = dollar_format())
print(plot_Fare)
full$Fare[missingFare] <- median(full[full$Pclass == full[missingFare[1], "Pclass"] &
full$Embarked == full[missingFare[1], "Embarked"], "Fare"],
na.rm = TRUE)
## Predictive imputation
summary(full$Age)
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = '[,.]')[[1]][1])
full$Family <- paste(full$Surname, full$FSize, sep = '_')
factor_vars <- c('PassengerId', 'Pclass', 'Sex', 'Embarked', 'Title', 'Surname', 'Family', 'FSizeD')
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(9231066)
mice_mod <- mice(full[, !names(full) %in%
c('PassengerId', 'Name', 'Ticket', 'Cabin', 'Family', 'Surname', 'Survived')],
method = 'rf')
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(full$Age, freq = F, main = 'Age: Original Data', col = 'darkgreen', ylim = c(0, 0.04))
hist(mice_output$Age, freq = F, main = 'Age: MICE Output', col = 'lightgreen', ylim = c(0, 0.04))
full$Age <- mice_output$Age
summary(full$Age)
# Feature engineering II
## Child and mother features
plot_Age_Survived_Sex <- ggplot(full[1:891, ], aes(Age, fill = factor(Survived)))
plot_Age_Survived_Sex <- plot_Age_Survived_Sex +
geom_histogram() +
facet_grid(.~Sex)
print(plot_Age_Survived_Sex)
full$Child[full$Age < 18] <- 'Child'
full$Child[full$Age >= 18] <- 'Adult'
table(full$Child, full$Survived)
full$Mother <- 'Not Mother'
full$Mother[full$Sex == 'female' & full$Parch > 0 & full$Age > 18 & full$Title != 'Miss'] <- 'Mother'
table(full$Mother, full$Survived)
full$Child <- as.factor(full$Child)
full$Mother <- as.factor(full$Mother)
# Prediction
train <- full[1:nrow(train), ]
test <- full[(nrow(train) + 1):(nrow(train) + nrow(test)), ]
## Random Forest model
set.seed(9231066 + 2)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title +
FSizeD + Child + Mother,
data = train)
plot(rf_model, ylim(0, 0.36))
set.seed(9231066 + 2)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title +
FSizeD + Child + Mother,
data = train)
if (!'dplyr' %in% rownames(installed.packages())) {install.packages('dplyr')}
library('dplyr')
if (!'ggplot2' %in% rownames(installed.packages())) {install.packages('ggplot2')}
library('ggplot2')
if (!'scales' %in% rownames(installed.packages())) {install.packages('scales')}
library('scales')
if (!'mice' %in% rownames(installed.packages())) {install.packages('mice')}
library('mice')
if (!'randomForest' %in% rownames(installed.packages())) {install.packages('randomForest')}
library('randomForest')
# Getting data
train <- read.csv('../train.csv')
test <- read.csv('../test.csv')
full <- bind_rows(train, test)
str(full)
# Feature engineering I
## Get passenger title
full$Title <- gsub('(.*, )|(\\..*)', '', full$Name)
table(full$Name, full$Title)
rare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
full$Title[full$Title == 'Mlle']        <- 'Miss'
full$Title[full$Title == 'Ms']          <- 'Miss'
full$Title[full$Title == 'Mme']         <- 'Mrs'
full$Title[full$Title %in% rare_title]  <- 'Rare Title'
table(full$Sex, full$Title)
## Do families sink or swim together?
full$FSize <- full$SibSp + full$Parch + 1
plot_FSize_Survived <- ggplot(full[1:nrow(train), ], aes(x = FSize, fill = factor(Survived)))
plot_FSize_Survived <- plot_FSize_Survived +
geom_bar(stat = 'Count', position = 'dodge') +
scale_x_continuous(breaks = c(1:11)) +
labs(x = "Family Size")
print(plot_FSize_Survived)
full$FSizeD[full$FSize == 1] <- 'singleton'
full$FSizeD[1 < full$FSize & full$FSize < 5] <- 'small'
full$FSizeD[4 < full$FSize] <- 'large'
mosaicplot(table(full$FSizeD, full$Survived), main = 'Family size by survival', shade = TRUE)
## Deck
full$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
# Missingness
## Embarked
table(full$Embarked)
missingEmbarked <- full[full$Embarked == "", "PassengerId"]
embarkFare <- full %>%
filter(!Embarked == "")
plot_Embark_Fare <- ggplot(embarkFare, aes(x = Embarked, y = Fare, fill = factor(Pclass)))
plot_Embark_Fare <- plot_Embark_Fare +
geom_boxplot() +
geom_hline(aes(yintercept = full[missingEmbarked[1], "Fare"]), colour = 'red', linetype = 'dashed', lwd = 2) +
scale_y_continuous(labels = dollar_format())
print(plot_Embark_Fare)
full$Embarked[missingEmbarked] <- 'C'
## Fare
summary(full$Fare)
missingFare <- full[is.na(full$Fare), "PassengerId"]
plot_Fare <- ggplot(full[full$Pclass == full[missingFare[1], "Pclass"] &
full$Embarked == full[missingFare[1], "Embarked"], ],
aes(x = Fare))
plot_Fare <- plot_Fare +
geom_density(fill = '#99d6ff', alpha = 0.4) +
geom_vline(aes(xintercept = median(Fare, na.rm = TRUE)), colour = 'red', linetype = 'dashed', lwd = 1) +
scale_x_continuous(labels = dollar_format())
print(plot_Fare)
full$Fare[missingFare] <- median(full[full$Pclass == full[missingFare[1], "Pclass"] &
full$Embarked == full[missingFare[1], "Embarked"], "Fare"],
na.rm = TRUE)
## Predictive imputation
summary(full$Age)
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = '[,.]')[[1]][1])
full$Family <- paste(full$Surname, full$FSize, sep = '_')
factor_vars <- c('PassengerId', 'Pclass', 'Sex', 'Embarked', 'Title', 'Surname', 'Family', 'FSizeD')
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(9231066)
mice_mod <- mice(full[, !names(full) %in%
c('PassengerId', 'Name', 'Ticket', 'Cabin', 'Family', 'Surname', 'Survived')],
method = 'rf')
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(full$Age, freq = F, main = 'Age: Original Data', col = 'darkgreen', ylim = c(0, 0.04))
hist(mice_output$Age, freq = F, main = 'Age: MICE Output', col = 'lightgreen', ylim = c(0, 0.04))
full$Age <- mice_output$Age
summary(full$Age)
# Feature engineering II
## Child and mother features
plot_Age_Survived_Sex <- ggplot(full[1:891, ], aes(Age, fill = factor(Survived)))
plot_Age_Survived_Sex <- plot_Age_Survived_Sex +
geom_histogram() +
facet_grid(.~Sex)
print(plot_Age_Survived_Sex)
full$Child[full$Age < 18] <- 'Child'
full$Child[full$Age >= 18] <- 'Adult'
table(full$Child, full$Survived)
full$Mother <- 'Not Mother'
full$Mother[full$Sex == 'female' & full$Parch > 0 & full$Age > 18 & full$Title != 'Miss'] <- 'Mother'
table(full$Mother, full$Survived)
full$Child <- as.factor(full$Child)
full$Mother <- as.factor(full$Mother)
# Prediction
train <- full[1:nrow(train), ]
test <- full[(nrow(train) + 1):(nrow(train) + nrow(test)), ]
## Random Forest model
set.seed(9231066 + 2)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title +
FSizeD + Child + Mother,
data = train)
print(plot_Age_Survived_Sex)
