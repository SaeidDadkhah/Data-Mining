{
    "collab_server" : "",
    "contents" : "if (!'dplyr' %in% rownames(installed.packages())) {install.packages('dplyr')}\nlibrary('dplyr')\nif (!'ggplot2' %in% rownames(installed.packages())) {install.packages('ggplot2')}\nlibrary('ggplot2')\nif (!'scales' %in% rownames(installed.packages())) {install.packages('scales')}\nlibrary('scales')\nif (!'mice' %in% rownames(installed.packages())) {install.packages('mice')}\nlibrary('mice')\nif (!'randomForest' %in% rownames(installed.packages())) {install.packages('randomForest')}\nlibrary('randomForest')\n\n\n# Getting data\ntrain <- read.csv('../input/train.csv')\ntest <- read.csv('../input/test.csv')\n\nfull <- bind_rows(train, test)\nstr(full)\n\n\n# Feature engineering I\n## Get passenger title\nfull$Title <- gsub('(.*, )|(\\\\..*)', '', full$Name)\n\ntable(full$Name, full$Title)\nrare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')\nfull$Title[full$Title == 'Mlle']        <- 'Miss' \nfull$Title[full$Title == 'Ms']          <- 'Miss'\nfull$Title[full$Title == 'Mme']         <- 'Mrs' \nfull$Title[full$Title %in% rare_title]  <- 'Rare Title'\ntable(full$Sex, full$Title)\n\n## Do families sink or swim together?\nfull$FSize <- full$SibSp + full$Parch + 1\nplot_FSize_Survived <- ggplot(full[1:nrow(train), ], aes(x = FSize, fill = factor(Survived)))\nplot_FSize_Survived <- plot_FSize_Survived +\n    geom_bar(stat = 'Count', position = 'dodge') +\n    scale_x_continuous(breaks = c(1:11)) +\n    labs(x = \"Family Size\")\nprint(plot_FSize_Survived)\n\nfull$FSizeD[full$FSize == 1] <- 'singleton'\nfull$FSizeD[1 < full$FSize & full$FSize < 5] <- 'small'\nfull$FSizeD[4 < full$FSize] <- 'large'\nmosaicplot(table(full$FSizeD, full$Survived), main = 'Family size by survival', shade = TRUE)\n\n## Deck\nfull$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))\n\n\n# Missingness\n## Embarked\ntable(full$Embarked)\nmissingEmbarked <- full[full$Embarked == \"\", \"PassengerId\"]\n\nembarkFare <- full %>%\n    filter(!Embarked == \"\")\nplot_Embark_Fare <- ggplot(embarkFare, aes(x = Embarked, y = Fare, fill = factor(Pclass)))\nplot_Embark_Fare <- plot_Embark_Fare +\n    geom_boxplot() +\n    geom_hline(aes(yintercept = full[missingEmbarked[1], \"Fare\"]), colour = 'red', linetype = 'dashed', lwd = 2) +\n    scale_y_continuous(labels = dollar_format())\nprint(plot_Embark_Fare)\n\nfull$Embarked[missingEmbarked] <- 'C'\n\n## Fare\nsummary(full$Fare)\nmissingFare <- full[is.na(full$Fare), \"PassengerId\"]\nplot_Fare <- ggplot(full[full$Pclass == full[missingFare[1], \"Pclass\"] &\n                             full$Embarked == full[missingFare[1], \"Embarked\"], ],\n                    aes(x = Fare))\nplot_Fare <- plot_Fare +\n    geom_density(fill = '#99d6ff', alpha = 0.4) +\n    geom_vline(aes(xintercept = median(Fare, na.rm = TRUE)), colour = 'red', linetype = 'dashed', lwd = 1) +\n    scale_x_continuous(labels = dollar_format())\nprint(plot_Fare)\n\nfull$Fare[missingFare] <- median(full[full$Pclass == full[missingFare[1], \"Pclass\"] &\n                                          full$Embarked == full[missingFare[1], \"Embarked\"], \"Fare\"],\n                                 na.rm = TRUE)\n\n## Predictive imputation\nsummary(full$Age)\n\nfull$Surname <- sapply(full$Name, function(x) strsplit(x, split = '[,.]')[[1]][1])\nfull$Family <- paste(full$Surname, full$FSize, sep = '_')\nfactor_vars <- c('PassengerId', 'Pclass', 'Sex', 'Embarked', 'Title', 'Surname', 'Family', 'FSizeD')\nfull[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))\n\nset.seed(9231066)\nmice_mod <- mice(full[, !names(full) %in%\n                          c('PassengerId', 'Name', 'Ticket', 'Cabin', 'Family', 'Surname', 'Survived')],\n                 method = 'rf')\nmice_output <- complete(mice_mod)\n\npar(mfrow = c(1, 2))\nhist(full$Age, freq = F, main = 'Age: Original Data', col = 'darkgreen', ylim = c(0, 0.04))\nhist(mice_output$Age, freq = F, main = 'Age: MICE Output', col = 'lightgreen', ylim = c(0, 0.04))\n\nfull$Age <- mice_output$Age\nsummary(full$Age)\n\n# Feature engineering II\n## Child and mother features\nplot_Age_Survived_Sex <- ggplot(full[1:891, ], aes(Age, fill = factor(Survived)))\nplot_Age_Survived_Sex <- plot_Age_Survived_Sex +\n    geom_histogram() +\n    facet_grid(.~Sex)\nprint(plot_Age_Survived_Sex)\n\nfull$Child[full$Age < 18] <- 'Child'\nfull$Child[full$Age >= 18] <- 'Adult'\ntable(full$Child, full$Survived)\n\nfull$Mother <- 'Not Mother'\nfull$Mother[full$Sex == 'female' & full$Parch > 0 & full$Age > 18 & full$Title != 'Miss'] <- 'Mother'\ntable(full$Mother, full$Survived)\n\nfull$Child <- as.factor(full$Child)\nfull$Mother <- as.factor(full$Mother)\n\n# Prediction\ntrain <- full[1:nrow(train), ]\ntest <- full[(nrow(train) + 1):(nrow(train) + nrow(test)), ]\n\n## Random Forest model\nset.seed(9231066 + 2)\nrf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title +\n                             FSizeD + Child + Mother,\n                         data = train)\npar(mfrow = c(1, 1))\nplot(rf_model, ylim = c(0, 0.36))\nlegend('topright', colnames(rf_model$err.rate), col = 1:3, fill = 1:3)\n\n## Variable importance\nimportance <- importance(rf_model)\nvarImportance <- data.frame(Variables = row.names(importance),\n                            Importance = round(importance[, 'MeanDecreaseGini'], 2))\nrankImportance <- varImportance %>%\n    mutate(Rank = paste0('#', dense_rank(desc(Importance))))\nplot_Importance <- ggplot(rankImportance,\n                          aes(x = reorder(Variables, Importance), y = Importance, fill = Importance))\nplot_Importance <- plot_Importance +\n    geom_bar(stat = 'identity') +\n    geom_text(aes(Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = 'red') +\n    labs(x = 'Variables') +\n    coord_flip()\nprint(plot_Importance)\n\n## Output\nprediction <- predict(rf_model, test)\nsolution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)\nwrite.csv(solution, file = 'rf_mod_solution.csv', row.names = FALSE)\n",
    "created" : 1486894014235.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3167534052",
    "id" : "69FCFA41",
    "lastKnownWriteTime" : 1486910936,
    "last_content_update" : 1486910643254,
    "path" : "Z:/8th Project/Data Mining/Titanic/Homework 01/Titanic/Titanic.R",
    "project_path" : "Titanic.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}